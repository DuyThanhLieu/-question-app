{"ast":null,"code":"var _jsxFileName = \"/Users/ThanhLieu/question-app/src/components/Admin/Content/ModalViewUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport './ModalCreateUser.scss';\nimport { FcPlus } from 'react-icons/fc';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ModalViewUser = props => {\n  _s();\n\n  const {\n    show,\n    setShow,\n    dataUpdateUser\n  } = props;\n\n  const handleClose = () => {\n    setShow(false);\n    resetForm();\n    props.resetUpdateDataUser();\n  };\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [role, setRole] = useState(\"USER\");\n  const [previewImage, setPreviewImage] = useState(\"\");\n  useEffect(() => {\n    if (!_.isEmpty(dataUpdateUser)) {\n      setEmail(dataUpdateUser.email || '');\n      setUsername(dataUpdateUser.username || '');\n      setRole(dataUpdateUser.role || 'USER');\n\n      if (dataUpdateUser.image) {\n        setPreviewImage(`data:image/jpeg;base64,${dataUpdateUser.image}`);\n      }\n    }\n  }, [dataUpdateUser]);\n\n  function handleUploadImage(event) {\n    if (event.target && event.target.files && event.target.files[0]) {\n      setPreviewImage(URL.createObjectURL(event.target.files[0])); // You can set `setImage` if needed\n      // setImage(event.target.files[0]);\n    }\n  }\n\n  const validateEmail = email => {\n    return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n  };\n\n  const handSubmitCreateUser = async () => {\n    // Assuming you want to prevent saving in view mode\n    if (props.mode === 'view') {\n      toast.warning('Cannot save in view mode');\n      return;\n    } // Validate email\n\n\n    const isValidEmail = validateEmail(email);\n\n    if (!isValidEmail) {\n      toast.error('Invalid email');\n      return;\n    } // Add your save logic here\n    // ...\n    // Close the modal and reset the form\n\n\n    handleClose();\n  };\n\n  const resetForm = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n    setUsername(\"\");\n    setRole(\"USER\");\n    setPreviewImage(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      size: \"xl\",\n      backdrop: \"static\",\n      className: \"modal-add-user\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: [props.mode === 'view' ? 'View' : 'Update', \" a user\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"row g-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              className: \"form-control\",\n              value: email,\n              disabled: true,\n              onChange: event => setEmail(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              className: \"form-control\",\n              value: password,\n              disabled: true,\n              onChange: event => setPassword(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              value: username,\n              disabled: true,\n              onChange: event => setUsername(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Role\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-select\",\n              value: role,\n              onChange: event => setRole(event.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"USER\",\n                children: \"USER\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"ADMIN\",\n                children: \"ADMIN\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), props.mode === 'update' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-label label-upload\",\n                htmlFor: \"labelUpload\",\n                children: [/*#__PURE__*/_jsxDEV(FcPlus, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 41\n                }, this), \" Upload File Image\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"labelUpload\",\n                hidden: true,\n                onChange: event => handleUploadImage(event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12 img-preview\",\n              children: previewImage ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: previewImage,\n                alt: \"Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 53\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \" Preview Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 96\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), props.mode === 'update' && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handSubmitCreateUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ModalViewUser, \"6bGienLm8ybK3ernEnScfUE3YrI=\");\n\n_c = ModalViewUser;\nexport default ModalViewUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalViewUser\");","map":{"version":3,"sources":["/Users/ThanhLieu/question-app/src/components/Admin/Content/ModalViewUser.js"],"names":["React","useEffect","useState","Button","Modal","FcPlus","toast","_","ModalViewUser","props","show","setShow","dataUpdateUser","handleClose","resetForm","resetUpdateDataUser","email","setEmail","password","setPassword","username","setUsername","role","setRole","previewImage","setPreviewImage","isEmpty","image","handleUploadImage","event","target","files","URL","createObjectURL","validateEmail","String","toLowerCase","match","handSubmitCreateUser","mode","warning","isValidEmail","error","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAO,wBAAP;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,uCAAP;AACA,OAAOC,CAAP,MAAc,QAAd;;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAAoCH,KAA1C;;AAEA,QAAMI,WAAW,GAAG,MAAM;AACtBF,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAG,IAAAA,SAAS;AACTL,IAAAA,KAAK,CAACM,mBAAN;AACH,GAJD;;AAMA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,MAAD,CAAhC;AACA,QAAM,CAACsB,YAAD,EAAeC,eAAf,IAAkCvB,QAAQ,CAAC,EAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACM,CAAC,CAACmB,OAAF,CAAUd,cAAV,CAAL,EAAgC;AAC5BK,MAAAA,QAAQ,CAACL,cAAc,CAACI,KAAf,IAAwB,EAAzB,CAAR;AACAK,MAAAA,WAAW,CAACT,cAAc,CAACQ,QAAf,IAA2B,EAA5B,CAAX;AACAG,MAAAA,OAAO,CAACX,cAAc,CAACU,IAAf,IAAuB,MAAxB,CAAP;;AAEA,UAAIV,cAAc,CAACe,KAAnB,EAA0B;AACtBF,QAAAA,eAAe,CAAE,0BAAyBb,cAAc,CAACe,KAAM,EAAhD,CAAf;AACH;AACJ;AACJ,GAVQ,EAUN,CAACf,cAAD,CAVM,CAAT;;AAYA,WAASgB,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,QAAIA,KAAK,CAACC,MAAN,IAAgBD,KAAK,CAACC,MAAN,CAAaC,KAA7B,IAAsCF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAA1C,EAAiE;AAC7DN,MAAAA,eAAe,CAACO,GAAG,CAACC,eAAJ,CAAoBJ,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAApB,CAAD,CAAf,CAD6D,CAE7D;AACA;AACH;AACJ;;AAED,QAAMG,aAAa,GAAIlB,KAAD,IAAW;AAC7B,WAAOmB,MAAM,CAACnB,KAAD,CAAN,CACFoB,WADE,GAEFC,KAFE,CAGC,wJAHD,CAAP;AAKH,GAND;;AAQA,QAAMC,oBAAoB,GAAG,YAAY;AACrC;AACA,QAAI7B,KAAK,CAAC8B,IAAN,KAAe,MAAnB,EAA2B;AACvBjC,MAAAA,KAAK,CAACkC,OAAN,CAAc,0BAAd;AACA;AACH,KALoC,CAOrC;;;AACA,UAAMC,YAAY,GAAGP,aAAa,CAAClB,KAAD,CAAlC;;AACA,QAAI,CAACyB,YAAL,EAAmB;AACfnC,MAAAA,KAAK,CAACoC,KAAN,CAAY,eAAZ;AACA;AACH,KAZoC,CAcrC;AACA;AAEA;;;AACA7B,IAAAA,WAAW;AACd,GAnBD;;AAqBA,QAAMC,SAAS,GAAG,MAAM;AACpBG,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,IAAAA,OAAO,CAAC,MAAD,CAAP;AACAE,IAAAA,eAAe,CAAC,EAAD,CAAf;AACH,GAND;;AAQA,sBACI;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEf,IAAb;AAAmB,MAAA,MAAM,EAAEG,WAA3B;AAAwC,MAAA,IAAI,EAAC,IAA7C;AAAkD,MAAA,QAAQ,EAAC,QAA3D;AAAoE,MAAA,SAAS,EAAC,gBAA9E;AAAA,8BACI,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,WAAW,MAAzB;AAAA,+BACI,QAAC,KAAD,CAAO,KAAP;AAAA,qBAAcJ,KAAK,CAAC8B,IAAN,KAAe,MAAf,GAAwB,MAAxB,GAAiC,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,KAAD,CAAO,IAAP;AAAA,+BACI;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA,kCACI;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,oCACI;AAAO,cAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AACI,cAAA,IAAI,EAAC,OADT;AAEI,cAAA,SAAS,EAAC,cAFd;AAGI,cAAA,KAAK,EAAEvB,KAHX;AAII,cAAA,QAAQ,EAAE,IAJd;AAKI,cAAA,QAAQ,EAAGa,KAAD,IAAWZ,QAAQ,CAACY,KAAK,CAACC,MAAN,CAAaa,KAAd;AALjC;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAWI;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,oCACI;AAAO,cAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AACI,cAAA,IAAI,EAAC,UADT;AAEI,cAAA,SAAS,EAAC,cAFd;AAGI,cAAA,KAAK,EAAEzB,QAHX;AAII,cAAA,QAAQ,EAAE,IAJd;AAKI,cAAA,QAAQ,EAAGW,KAAD,IAAWV,WAAW,CAACU,KAAK,CAACC,MAAN,CAAaa,KAAd;AALpC;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXJ,eAqBI;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,oCACI;AAAO,cAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AACI,cAAA,IAAI,EAAC,MADT;AAEI,cAAA,SAAS,EAAC,cAFd;AAGI,cAAA,KAAK,EAAEvB,QAHX;AAII,cAAA,QAAQ,EAAE,IAJd;AAKI,cAAA,QAAQ,EAAGS,KAAD,IAAWR,WAAW,CAACQ,KAAK,CAACC,MAAN,CAAaa,KAAd;AALpC;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBArBJ,eA+BI;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,oCACI;AAAO,cAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAQ,cAAA,SAAS,EAAC,aAAlB;AAAgC,cAAA,KAAK,EAAErB,IAAvC;AAA6C,cAAA,QAAQ,EAAGO,KAAD,IAAWN,OAAO,CAACM,KAAK,CAACC,MAAN,CAAaa,KAAd,CAAzE;AAAA,sCACI;AAAQ,gBAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAQ,gBAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBA/BJ,EAsCKlC,KAAK,CAAC8B,IAAN,KAAe,QAAf,iBACG;AAAA,oCACI;AAAK,cAAA,SAAS,EAAC,WAAf;AAAA,sCACI;AAAO,gBAAA,SAAS,EAAC,yBAAjB;AAA2C,gBAAA,OAAO,EAAC,aAAnD;AAAA,wCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,wBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAII;AAAO,gBAAA,IAAI,EAAC,MAAZ;AAAmB,gBAAA,EAAE,EAAC,aAAtB;AAAoC,gBAAA,MAAM,MAA1C;AAA2C,gBAAA,QAAQ,EAAGV,KAAD,IAAWD,iBAAiB,CAACC,KAAD;AAAjF;AAAA;AAAA;AAAA;AAAA,sBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAOI;AAAK,cAAA,SAAS,EAAC,uBAAf;AAAA,wBACKL,YAAY,gBAAG;AAAK,gBAAA,GAAG,EAAEA,YAAV;AAAwB,gBAAA,GAAG,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,sBAAH,gBAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAD/D;AAAA;AAAA;AAAA;AAAA,oBAPJ;AAAA,0BAvCR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ,eA0DI,QAAC,KAAD,CAAO,MAAP;AAAA,gCACI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,OAAO,EAAEX,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIKJ,KAAK,CAAC8B,IAAN,KAAe,QAAf,iBACG,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,OAAO,EAAED;AAAnC;AAAA;AAAA;AAAA;AAAA,gBALR;AAAA;AAAA;AAAA;AAAA;AAAA,cA1DJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAyEH,CAjJD;;GAAM9B,a;;KAAAA,a;AAmJN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport './ModalCreateUser.scss';\nimport { FcPlus } from 'react-icons/fc';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport _ from 'lodash';\n\nconst ModalViewUser = (props) => {\n    const { show, setShow, dataUpdateUser } = props;\n\n    const handleClose = () => {\n        setShow(false);\n        resetForm();\n        props.resetUpdateDataUser();\n    };\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [username, setUsername] = useState(\"\");\n    const [role, setRole] = useState(\"USER\");\n    const [previewImage, setPreviewImage] = useState(\"\");\n\n    useEffect(() => {\n        if (!_.isEmpty(dataUpdateUser)) {\n            setEmail(dataUpdateUser.email || '');\n            setUsername(dataUpdateUser.username || '');\n            setRole(dataUpdateUser.role || 'USER');\n\n            if (dataUpdateUser.image) {\n                setPreviewImage(`data:image/jpeg;base64,${dataUpdateUser.image}`);\n            }\n        }\n    }, [dataUpdateUser]);\n\n    function handleUploadImage(event) {\n        if (event.target && event.target.files && event.target.files[0]) {\n            setPreviewImage(URL.createObjectURL(event.target.files[0]));\n            // You can set `setImage` if needed\n            // setImage(event.target.files[0]);\n        }\n    }\n\n    const validateEmail = (email) => {\n        return String(email)\n            .toLowerCase()\n            .match(\n                /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n            );\n    };\n\n    const handSubmitCreateUser = async () => {\n        // Assuming you want to prevent saving in view mode\n        if (props.mode === 'view') {\n            toast.warning('Cannot save in view mode');\n            return;\n        }\n\n        // Validate email\n        const isValidEmail = validateEmail(email);\n        if (!isValidEmail) {\n            toast.error('Invalid email');\n            return;\n        }\n\n        // Add your save logic here\n        // ...\n\n        // Close the modal and reset the form\n        handleClose();\n    };\n\n    const resetForm = () => {\n        setEmail(\"\");\n        setPassword(\"\");\n        setUsername(\"\");\n        setRole(\"USER\");\n        setPreviewImage(\"\");\n    };\n\n    return (\n        <>\n            <Modal show={show} onHide={handleClose} size=\"xl\" backdrop=\"static\" className='modal-add-user'>\n                <Modal.Header closeButton>\n                    <Modal.Title>{props.mode === 'view' ? 'View' : 'Update'} a user</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <form className=\"row g-3\">\n                        <div className=\"col-md-6\">\n                            <label className=\"form-label\">Email</label>\n                            <input\n                                type=\"email\"\n                                className=\"form-control\"\n                                value={email}\n                                disabled={true}\n                                onChange={(event) => setEmail(event.target.value)}\n                            />\n                        </div>\n                        <div className=\"col-md-6\">\n                            <label className=\"form-label\">Password</label>\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                value={password}\n                                disabled={true}\n                                onChange={(event) => setPassword(event.target.value)}\n                            />\n                        </div>\n                        <div className=\"col-md-6\">\n                            <label className=\"form-label\">Username</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                value={username}\n                                disabled={true}\n                                onChange={(event) => setUsername(event.target.value)}\n                            />\n                        </div>\n                        <div className=\"col-md-4\">\n                            <label className=\"form-label\">Role</label>\n                            <select className=\"form-select\" value={role} onChange={(event) => setRole(event.target.value)}>\n                                <option value=\"USER\">USER</option>\n                                <option value=\"ADMIN\">ADMIN</option>\n                            </select>\n                        </div>\n                        {props.mode === 'update' && (\n                            <>\n                                <div className='col-md-12'>\n                                    <label className=\"form-label label-upload\" htmlFor='labelUpload'>\n                                        <FcPlus /> Upload File Image\n                                    </label>\n                                    <input type=\"file\" id=\"labelUpload\" hidden onChange={(event) => handleUploadImage(event)} />\n                                </div>\n                                <div className='col-md-12 img-preview'>\n                                    {previewImage ? <img src={previewImage} alt=\"Preview\" /> : <span> Preview Image</span>}\n                                </div>\n                            </>\n                        )}\n                    </form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    {props.mode === 'update' && (\n                        <Button variant=\"primary\" onClick={handSubmitCreateUser}>\n                            {/* Save */}\n                        </Button>\n                    )}\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nexport default ModalViewUser;\n"]},"metadata":{},"sourceType":"module"}